#!/usr/bin/env python3

import json
import os
import math
import sys
import glob
import rich.traceback
from rich.console import Console
from os.path import exists, join
from daqconf.core.system import System
from daqconf.core.conf_utils import make_app_command_data
from daqconf.core.metadata import write_metadata_file
from daqconf.core.config_file import generate_cli_from_schema

CLOCK_SPEED_HZ = 50000000

# Add -h as default help option
CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])

console = Console()

# Set moo schema search path
from dunedaq.env import get_moo_model_path
import moo.io
moo.io.default_load_path = get_moo_model_path()

import click

# Add -h as default help option
CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])
@click.command(context_settings=CONTEXT_SETTINGS)
@generate_cli_from_schema('listrev/confgen.jsonnet', 'listrev_gen')
@click.argument('json_dir', type=click.Path())
def cli(config, json_dir):

    if exists(json_dir):
        raise RuntimeError(f"Directory {json_dir} already exists")

    config_data = config[0]
    config_file = config[1]

    # Get our config objects
    # Loading this one another time... (first time in config_file.generate_cli_from_schema)
    # The amount of shenanigans on has to go thru here is astounding
    moo.otypes.load_types('listrev/confgen.jsonnet')
    import dunedaq.listrev.confgen as confgen
    moo.otypes.load_types('daqconf/confgen.jsonnet')
    import dunedaq.daqconf.confgen as daqconfgen

    ## Hack, we shouldn't need to do that, in the future it should be, boot = config_data.boot
    boot = daqconfgen.boot(**config_data.boot)
    ## etc...
    listrev = confgen.listrev(**config_data.listrev)

    # Validate apps
    apps_check = "".join(listrev.apps)
    if "s" in apps_check and not apps_check == "s":
        raise RuntimeError(f"App spec {apps} contains an \"s\" entry, which must be alone!")

    if "s" not in apps_check and (len(apps_check) != 3 or "g" not in apps_check or "r" not in apps_check or "v" not in apps_check):
        raise RuntimeError(f"App spec {apps} is not \"s\", so must contain one each of \"g\", \"r\", and \"v\"")


    console.log('Loading listrevapp config generator')
    from listrev import listrevapp_gen

    the_system = System()


    # add app
    for appspec in listrev.apps:
        the_system.apps["listrev-app-"+appspec] = listrevapp_gen.get_listrev_app(
            nickname="listrev-app-"+appspec,
            host=listrev.host_app,
            n_ints=listrev.ints_per_list,
            n_wait_ms=listrev.wait_ms,
            gen_mode=appspec
        )

    ####################################################################
    # Application command data generation
    ####################################################################

    # Arrange per-app command data into the format used by util.write_json_files()
    app_command_datas = {
        name : make_app_command_data(the_system, app, name, use_connectivity_service=boot.use_connectivity_service)
        for name,app in the_system.apps.items()
    }

    # Make boot.json config
    from daqconf.core.conf_utils import make_system_command_datas, write_json_files
    system_command_datas = make_system_command_datas(
        boot,
        the_system,
        verbose=False
    )

    write_json_files(app_command_datas, system_command_datas, json_dir, verbose=True)

    console.log(f"Listrev app config generated in {json_dir}")

    write_metadata_file(json_dir, "listrev_gen", config_file)

if __name__ == '__main__':
    try:
        cli(show_default=True, standalone_mode=True)
    except Exception as e:
        console.print_exception()
