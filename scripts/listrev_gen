#!/usr/bin/env python3

import json
import os
import math
import sys
import glob
import rich.traceback
from rich.console import Console
from os.path import exists, join
from daqconf.core.system import System
from daqconf.core.conf_utils import make_app_command_data
from daqconf.core.metadata import write_metadata_file
from daqconf.core.config_file import generate_cli_from_schema

# Add -h as default help option
CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])

from daqconf.core.console import console

import click

# Add -h as default help option
CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])
@click.command(context_settings=CONTEXT_SETTINGS)
@generate_cli_from_schema('listrev/confgen.jsonnet', 'listrev_gen')
@click.option('--debug', default=False, is_flag=True, help="Switch to get a lot of printout and dot files")
@click.argument('json_dir', type=click.Path())
def cli(config, debug, json_dir):

    if exists(json_dir):
        raise RuntimeError(f"Directory {json_dir} already exists")

    config_data = config[0]
    config_file = config[1]

    
    import dunedaq.listrev.confgen as confgen
    import dunedaq.daqconf.bootgen as bootgen
    
    ## Hack, we shouldn't need to do that, in the future it should be, boot = config_data.boot
    boot = bootgen.boot(**config_data.boot)
    if debug: console.log(f"boot configuration object: {boot.pod()}")

    listrev = confgen.listrev(**config_data.listrev)
    if debug: console.log(f"listrev configuration object: {listrev.pod()}")

    # Validate apps
    parsed_apps = [ a.replace("s", "grv") for a in listrev.apps ]
    apps_check = "".join(parsed_apps)

    if ("g" not in apps_check or "r" not in apps_check or "v" not in apps_check):
        raise RuntimeError(f"App spec {apps} is not \"s\", so must contain one each of \"g\", \"r\", and \"v\"")

    n_generators = apps_check.count("g")
    n_reversers = apps_check.count("r")

    if apps_check.count("v") > 1:
        raise RuntimeError(f"App spec {apps} contains more than one Validator!")

    console.log('Loading listrevapp config generator')
    from listrev import listrevapp_gen

    the_system = System()


    # add app
    appidx=0
    generator_count=0
    reverser_count=0
    for appspec in parsed_apps:
        generators=[generator_count+gg for gg in range(appspec.count("g"))]
        generator_count += appspec.count("g")
        reversers=[reverser_count+rr for rr in range(appspec.count("r"))]
        reverser_count+= appspec.count("r")
        has_validator=appspec.count("v") == 1

        the_system.apps[f"listrev-app-{appspec}-{appidx}"] = listrevapp_gen.get_listrev_app(
            nickname=f"listrev-app-{appspec}-{appidx}",
            host=listrev.host_app,
            n_wait_ms=listrev.config['wait_ms'],
            request_timeout_ms=listrev.config['request_timeout_ms'],
            request_rate_hz=listrev.config['request_rate_hz'],
            generator_indicies=generators,
            reverser_indicies=reversers,
            has_validator=has_validator,
            n_generators=n_generators,
            n_reversers=n_reversers,
            n_ints_min=listrev.config['ints_per_list_min'],
            n_ints_max=listrev.config['ints_per_list_max'],
            n_reqs=listrev.config['max_requests']
        )
        appidx+=1

    ####################################################################
    # Application command data generation
    ####################################################################

    # Arrange per-app command data into the format used by util.write_json_files()
    app_command_datas = {
        name : make_app_command_data(the_system, app, name, use_connectivity_service=boot.use_connectivity_service)
        for name,app in the_system.apps.items()
    }

    # Make boot.json config
    from daqconf.core.conf_utils import make_system_command_datas, write_json_files
    system_command_datas = make_system_command_datas(
        boot,
        the_system,
        verbose=False
    )

    write_json_files(app_command_datas, system_command_datas, json_dir, verbose=True)

    console.log(f"Listrev app config generated in {json_dir}")

    write_metadata_file(json_dir, "listrev_gen", config_file)

if __name__ == '__main__':
    try:
        cli(show_default=True, standalone_mode=True)
    except Exception as e:
        console.print_exception()
