#!/usr/bin/env python3

import json
import os
import math
import sys
import glob
import rich.traceback
from rich.console import Console
from os.path import exists, join
from daqconf.core.system import System
from daqconf.core.conf_utils import make_app_command_data
from daqconf.core.metadata import write_metadata_file
from daqconf.core.config_file import generate_cli_from_schema

# Add -h as default help option
CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])

from daqconf.core.console import console

import click

@click.command(context_settings=CONTEXT_SETTINGS)
@generate_cli_from_schema('listrev/confgen.jsonnet', 'commtest_gen')
@click.option('--debug', default=False, is_flag=True, help="Switch to get a lot of printout and dot files")
@click.argument('json_dir', type=click.Path())
def cli(config, debug, json_dir):

    if exists(json_dir):
        raise RuntimeError(f"Directory {json_dir} already exists")

    config_data = config[0]
    config_file = config[1]

    import dunedaq.listrev.confgen as confgen
    import dunedaq.daqconf.bootgen as bootgen
    
    ## Hack, we shouldn't need to do that, in the future it should be, boot = config_data.boot
    boot = bootgen.boot(**config_data.boot)
    if debug: console.log(f"boot configuration object: {boot.pod()}")

    commtest = confgen.commtest(**config_data.commtest)
    if debug: console.log(f"commtest configuration object: {commtest.pod()}")

    if len(commtest.hosts) < 2:
        raise RuntimeError("More than one host must be tested!")

    console.log('Loading listrev config generator')
    from listrev import listrevapp_gen

    the_system = System()

    for hostidx in range(len(commtest.hosts)):
        host=commtest.hosts[hostidx]
        if hostidx == 0:
            the_system.apps["listrev-app-rv-" + host] = listrevapp_gen.get_listrev_app(
                "listrev-app-rv-" + host,
                host,
                n_ints_min = commtest.config['ints_per_list_min'],
                n_ints_max = commtest.config['ints_per_list_max'],
                n_wait_ms = commtest.config['wait_ms'],
                request_timeout_ms = commtest.config['request_timeout_ms'],
                request_rate_hz = commtest.config['request_rate_hz'],
                has_validator=True,
                reverser_indicies=[0],
                n_generators=len(commtest.hosts)-1,
                n_reversers=1
            )
        else:
            the_system.apps[f"listrev-app-g-{hostidx}-{host}"] = listrevapp_gen.get_listrev_app(
                f"listrev-app-g-{hostidx}-{host}",
                host,
                n_wait_ms = commtest.config['wait_ms'],
                request_timeout_ms = commtest.config['request_timeout_ms'],
                generator_indicies=[hostidx - 1],
                n_reversers=1
            )

    ####################################################################
    # Application command data generation
    ####################################################################

    # Arrange per-app command data into the format used by util.write_json_files()
    app_command_datas = {
        name : make_app_command_data(the_system, app, name, use_connectivity_service=boot.use_connectivity_service)
        for name,app in the_system.apps.items()
    }

    # Make boot.json config
    from daqconf.core.conf_utils import make_system_command_datas,generate_boot, write_json_files
    system_command_datas = make_system_command_datas(
        boot,
        the_system,
        verbose=False
    )

    write_json_files(app_command_datas, system_command_datas, json_dir, verbose=True)

    console.log(f"Listrev app config generated in {json_dir}")

    write_metadata_file(json_dir, "listrev_gen", config_file)

if __name__ == '__main__':
    try:
        cli(show_default=True, standalone_mode=True)
    except Exception as e:
        console.print_exception()
